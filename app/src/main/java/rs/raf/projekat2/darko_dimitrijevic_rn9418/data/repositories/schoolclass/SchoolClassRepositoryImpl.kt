package rs.raf.projekat2.darko_dimitrijevic_rn9418.data.repositories.schoolclass

import io.reactivex.Observable
import rs.raf.projekat2.darko_dimitrijevic_rn9418.data.datasources.local.database.schoolclass.SchoolClassDao
import rs.raf.projekat2.darko_dimitrijevic_rn9418.data.datasources.remote.SchoolClassService
import rs.raf.projekat2.darko_dimitrijevic_rn9418.data.models.Resource
import rs.raf.projekat2.darko_dimitrijevic_rn9418.data.models.schoolclass.SchoolClass
import rs.raf.projekat2.darko_dimitrijevic_rn9418.data.models.schoolclass.SchoolClassEntity

class SchoolClassRepositoryImpl(private val remoteDataSource: SchoolClassService, private val localDataSource: SchoolClassDao) : SchoolClassRepository {


    override fun fetchAll(): Observable<Resource<Unit>> {
        return remoteDataSource.getAll()
            .doOnNext {
                var entities = it.map {
                    SchoolClassEntity (
                        id = 0, /** Here we set id to 0, but our entity id is autoGenerated, so it will increment automatically. */
                        name = it.predmet,
                        type = it.tip,
                        professor = it.nastavnik,
                        classroom = it.ucionica,
                        groups = it.grupe,
                        day = it.dan,
                        term = it.termin
                    )
                }

                localDataSource.deleteAndInsertAll(entities)

            }.map {
                Resource.Success(Unit)
            }
    }

    override fun getAll(): Observable<Resource<List<SchoolClass>>> {
        return localDataSource
            .getAll()
            .map {
                Resource.Success(it)
            }
    }

    override fun getByName(name: String): Observable<Resource<List<SchoolClass>>> {
        return localDataSource
            .getByName(name)
            .map {
                Resource.Success(it)
            }
    }

    override fun getFiltered(name: String, professor: String, group: String, day: String): Observable<Resource<List<SchoolClass>>> {
        return localDataSource
            .getFiltered(name, professor, group, day)
            .map {
                Resource.Success(it)
            }

    }


}